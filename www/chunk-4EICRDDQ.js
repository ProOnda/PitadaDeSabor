import{f as z,i as T,k as c,m as f,r as v,t as S}from"./chunk-O5PN56JD.js";import{k as I,n as b,o as C,q as E,r as j,s as p}from"./chunk-P4K7NQPT.js";import{A as d,bb as N,d as R,k as w,l as m,n as h,s as D,t as L,x as F}from"./chunk-J7TXCJLH.js";import{a as A,b as y,g as n}from"./chunk-OLRFWS6T.js";var O=(()=>{let a=class a{constructor(e,o,t){this.auth=e,this.router=o,this.firestore=t,this.usersCollection=T(this.firestore,"users"),this.userName$=new R(null),console.log("AuthService: Construtor inicializado."),this.authState=b(this.auth),this.authState.pipe(L(r=>r?this.getCurrentUserData(r.uid).pipe(h(s=>(s==null?void 0:s.user_name)||(s==null?void 0:s.displayName)||r.email||null)):m(null))).subscribe(r=>{this.userName$.next(r)}),console.log("AuthService: auth.currentUser (no construtor):",this.auth.currentUser?this.auth.currentUser.uid:"null")}getUserId(){let e=this.auth.currentUser;return console.log("AuthService - getUserId(): auth.currentUser.uid:",e?e.uid:"null"),e?e.uid:null}getUserName(){return this.userName$.getValue()}registerUser(e,o,t){return n(this,null,function*(){var r,s,l;console.log("AuthService - registerUser(): Tentando registrar usu\xE1rio com email:",e);try{let u=yield C(this.auth,e,o),i=u.user;if(i){console.log("AuthService - registerUser(): Firebase User criado. UID:",i.uid,"Email do FirebaseUser:",i.email),yield p(i,{displayName:t,photoURL:void 0});let g={uid:i.uid,email:(r=i.email)!=null?r:null,displayName:(s=i.displayName)!=null?s:null,photoURL:(l=i.photoURL)!=null?l:null,user_name:t,favoriteRecipeIds:[]};console.log("AuthService - registerUser(): UserData a ser salva no Firestore (antes de setDoc):",g),yield v(c(this.usersCollection,i.uid),g,{merge:!0}),console.log("AuthService - registerUser(): Dados do novo usu\xE1rio salvos no Firestore:",g)}return console.log("AuthService - registerUser(): Usu\xE1rio registrado com sucesso. UID:",u.user.uid),console.log("AuthService - registerUser(): auth.currentUser ap\xF3s registro:",this.auth.currentUser?this.auth.currentUser.uid:"null"),i}catch(u){return console.error("AuthService - registerUser(): Erro ao registrar usu\xE1rio:",u.code,u.message),Promise.reject(u)}})}loginUser(e,o){return n(this,null,function*(){console.log("AuthService - loginUser(): Tentando fazer login...");try{let t=yield E(this.auth,e,o),r=t.user;return r&&(yield this.saveUserDataToFirestore(r)),console.log("AuthService - loginUser(): Login bem-sucedido. UID:",t.user.uid),console.log("AuthService - loginUser(): auth.currentUser ap\xF3s login:",this.auth.currentUser?this.auth.currentUser.uid:"null"),r}catch(t){return console.error("AuthService - loginUser(): Erro ao fazer login:",t.code,t.message),Promise.reject(t)}})}logoutUser(){return n(this,null,function*(){console.log("AuthService - logoutUser(): Tentando fazer logout...");try{yield j(this.auth),console.log("AuthService - logoutUser(): Logout bem-sucedido."),console.log("AuthService - logoutUser(): auth.currentUser ap\xF3s logout:",this.auth.currentUser?this.auth.currentUser.uid:"null"),this.router.navigate(["/login"])}catch(e){console.error("AuthService - logoutUser(): Erro ao fazer logout:",e)}})}isLoggedIn(){return this.authState.pipe(h(e=>!!e))}getCurrentUser(){return this.authState}getToken(){let e=this.auth.currentUser;return e?e.getIdToken():Promise.resolve(null)}saveUserDataToFirestore(e){return n(this,null,function*(){var s,l,u;let o=c(this.usersCollection,e.uid),t=yield f(o),r={uid:e.uid,email:(s=e.email)!=null?s:null,displayName:(l=e.displayName)!=null?l:null,photoURL:(u=e.photoURL)!=null?u:null,user_name:e.displayName||e.email||"Novo Usu\xE1rio",favoriteRecipeIds:t.exists()?t.data().favoriteRecipeIds||[]:[]};t.exists()?(yield S(o,{displayName:r.displayName,photoURL:r.photoURL,user_name:r.user_name,email:r.email}),console.log("AuthService: Dados do usu\xE1rio existente atualizados no Firestore:",r.uid)):(yield v(o,r),console.log("AuthService: Dados do novo usu\xE1rio criados no Firestore:",r))})}getCurrentUserData(e){let o=c(this.firestore,`users/${e}`);return w(f(o)).pipe(h(t=>{if(t.exists()){let r=t.data();return y(A({},r),{uid:t.id})}else return console.log(`AuthService: Documento do usu\xE1rio ${e} n\xE3o encontrado no Firestore.`),null}),D(t=>(console.error("AuthService: Erro ao buscar dados do usu\xE1rio no Firestore:",t),m(null))))}updateUserPhotoUrl(e,o){return n(this,null,function*(){if(!e)throw console.error("AuthService: userId \xE9 nulo para updateUserPhotoUrl."),new Error("User ID is required to update photo URL.");let t=c(this.usersCollection,e);try{yield S(t,{photoURL:o}),console.log(`AuthService: URL da foto de perfil do usu\xE1rio ${e} atualizada para: ${o}`),this.auth.currentUser&&this.auth.currentUser.uid===e&&(yield p(this.auth.currentUser,{photoURL:o}))}catch(r){throw console.error(`AuthService: Erro ao atualizar foto de perfil do usu\xE1rio ${e} no Firestore:`,r),r}})}};a.\u0275fac=function(o){return new(o||a)(d(I),d(N),d(z))},a.\u0275prov=F({token:a,factory:a.\u0275fac,providedIn:"root"});let U=a;return U})();export{O as a};
